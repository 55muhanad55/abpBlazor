@using Models.User
@using Models.User.Results
@inject IUserService user
@inject NotificationService notificationService
    <RadzenCard Style="position: inherit">
        <EditForm Model="resetPasswordModel" OnValidSubmit="ResetPasswordAsync">
            <DataAnnotationsValidator />

            <div class="col-md-9 offset-md-3"><p class="text-info mb-1"> @c.l["ResetPasswordStepOneInfo"] </p></div>

            <div class="form-group row required">
                <label for="name" class="col-md-3 col-form-label"> @c.l["AdminPassword"] </label>
                <div class="col-md-9">
                    <InputText @bind-Value="resetPasswordModel.adminPassword" type="password" class="form-control " />
                    <ValidationMessage For="() => resetPasswordModel.adminPassword" />

                </div>
            </div>
            <div class="col-md-9 offset-md-3"><p class="text-info mb-1"> @c.l["ResetPasswordStepTwoInfo"] </p></div>
            <div class="form-group row required">
                <label for="name" class="col-md-3 col-form-label"> @c.l["NewPassword"] </label>
                <div class="col-md-9">
                    <InputText @bind-Value="resetPasswordModel.newPassword" type="password" class="form-control " />
                    <ValidationMessage For="() => resetPasswordModel.newPassword" />

                </div>
            </div>
            <br />
            <div class="modal-footer justify-content-between">
                <button type="button" class="btn btn-default" @onclick="()=> ds.Close()">
                    @c.l["Cancel"]
                </button>

                <button type="submit" class="btn btn-primary">
                    @c.l["Save"]
                </button>
            </div>
        </EditForm>
        </RadzenCard>

        @code {
            ResetPasswordDto resetPasswordModel = new ResetPasswordDto();

            [Parameter]
            public DialogService ds { get; set; }
            [Parameter]
            public int userId { get; set; }

            protected override async Task OnInitializedAsync()
            {
                resetPasswordModel.userId = userId;
                await Task.FromResult(resetPasswordModel.userId);
            }


            async Task ResetPasswordAsync()
            {

                var response = await user.ResetPassword(resetPasswordModel);
                if (response.success)
                {
                    notificationService.Notify(new NotificationMessage()
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = c.l["SavedSuccessfully"],
                        Detail = "",
                        Duration = 3000
                    });
                }
                else
                {
                    notificationService.Notify(new NotificationMessage()
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = response.error.message,
                        Detail = response.error.details,
                        Duration = 3000
                    });
                }
                ds.Close();
            }

        }
