@page "/Users"
@attribute [Authorize(Policy = "Users")]

@using Models.User
@using Models.User.Results
@using Web.Blazor.Pages.UsersDialogs
@inject IUserService user
@inject DialogService dialogService
@inject NotificationService notificationService


<section class="content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-6">
                <h1>@c.l["Users"]</h1>
            </div>
            <div class="col-6 text-right">
                <button class="btn btn-primary" @onclick="async () => await CreateUserDialog()">
                    <i class="fa fa-plus-square"></i>
                    @c.l["Create"]
                </button>
            </div>
        </div>
    </div>
</section>
<section class="content px-2 loading">
    <div class="container-fluid">
        <div class="card">

            <div class="card-header">
                <EditForm Model="searchKeyword">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <button type="submit" class="btn btn-primary" @onclick="async () => await refreshResult(searchKeyword.keyword,0)">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                        <InputTextBox class="form-control" placeholder="@c.l["SearchWithThreeDot"]" @bind-Value="searchKeyword.keyword" />

                    </div>
                </EditForm>
            </div>

            <div class="card-body table-responsive p-0">
                <RadzenGrid TItem="UserResult" Data="@pageUsers">
                    <Columns>
                        <RadzenGridColumn TItem="UserResult" Property="userName" Title="@c.l["UserName"]" />
                        <RadzenGridColumn TItem="UserResult" Property="name" Title="@c.l["Name"]" />
                        <RadzenGridColumn TItem="UserResult" Property="emailAddress" Title="@c.l["EmailAddress"]" />
                        <RadzenGridColumn TItem="UserResult" Context="userData" Title="@c.l["IsActive"]" Width="80px">
                            <Template Context="userData">
                                <div class="custom-control custom-checkbox">
                                    <input type="checkbox" class="custom-control-input disabled" @bind="userData.isActive" />
                                    <label class="custom-control-label"></label>
                                </div>
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="UserResult" Context="userData" Title="@c.l["Actions"]" Width="320px">
                            <Template Context="userData">
                                <button type="button" class="btn btn-sm btn-secondary" @onclick="async () => await EditUserDialog(userData.id)">
                                    <i class="fas fa-pencil-alt"></i>
                                    @c.l["Edit"]
                                </button>
                                <button type="button" class="btn btn-sm btn-danger mx-2" @onclick="async () => await DeleteUser(userData.id,userData.name)">
                                    <i class="fas fa-trash"></i>
                                    @c.l["Delete"]
                                </button>
                                <button type="button" class="btn btn-sm btn-secondary" @onclick="async () => await ResetPasswordDialog(userData.id)">
                                    <i class="fas fa-lock"></i>
                                    @c.l["ResetPassword"]
                                </button>
                            </Template>
                        </RadzenGridColumn>
                    </Columns>
                </RadzenGrid>

            </div>




            <div class="card-footer bg-light border-top">
                <div class="row">
                    <div class="col-sm-4 col-12 text-sm-left text-center">
                        <button class="btn btn-secondary" @onclick="@( async () => await refreshResult(searchKeyword.keyword,(currentPage-1)*10) )">
                            <i class="fas fa-redo-alt"></i>
                        </button>
                    </div>
                    <div class="col-sm-4 col-12 text-center">
                        <p class="mb-0 my-2">
                            @c.l["TotalRecordsCount"].Replace("{0}", totalRoles.ToString())
                        </p>
                    </div>
                    <div class="col-sm-4 col-12">
                        <div class="float-sm-right m-auto">

                            <nav>
                                <ul class="pagination m-0 ng-star-inserted" style="">


                                    <li class="page-item ng-star-inserted @((currentPage == 1) ? @disabled : "")">
                                        <a class="page-link ng-star-inserted" @onclick="@( async () => await refreshResult(searchKeyword.keyword,(currentPage-2)*10))">
                                            <i class="fas fa-chevron-left"></i>
                                        </a>
                                    </li>

                                    @for (int i = 1; i < pages + 1; i++)
                                    {
                                        int pageNum = i;
                                        <li class="page-item @((currentPage == pageNum) ? @active : "") ng-star-inserted" style="z-index: 0;">
                                            <a class="page-link" @onclick="@( async () => await refreshResult(searchKeyword.keyword,(pageNum*10-10)))"> @i </a>
                                        </li>
                                    }

                                    <li class="page-item ng-star-inserted @((currentPage == pages) ? @disabled : "")">
                                        <a class="page-link ng-star-inserted" @onclick="@( async () => await refreshResult(searchKeyword.keyword,(currentPage*10)))"><i class="fas fa-chevron-right"></i></a>
                                    </li>
                                </ul>
                            </nav>

                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>

</section>






@code {
    SearchKeyword searchKeyword = new SearchKeyword();
    int MaxResultCount = 10;
    int pages = 1;
    int currentPage = 1;
    int totalRoles = 0;
    List<UserResult> pageUsers = new List<UserResult>();
    //CreateRoleDto CreateRolemodel = new CreateRoleDto();


    string disabled = "disabled";
    string active = "active";
    protected override async Task OnInitializedAsync()
    {

        await refreshResult("", 0);
    }

    private async Task refreshResult(string word, int skip)
    {
        var response = await user.GetAll(word, skip, MaxResultCount);
        pageUsers = response.result.items;
        totalRoles = response.result.totalCount;
        pages = 1 + ((totalRoles - 1) / MaxResultCount);
        currentPage = (skip / 10) + 1;

    }

    private async Task DeleteUser(int id, string userName)
    {
        var dialogResult = await dialogService.Confirm(c.l["UserDeleteWarningMessage"].Replace("{0}", userName), c.l["AreYouSureWantToDelete"].Replace("{0}", userName), new ConfirmOptions() { OkButtonText = c.l["Yes"], CancelButtonText = c.l["No"] });
        if (dialogResult.HasValue && dialogResult.Value)
        {
            var response = await user.Delete(id);
            if (response.success)
            {
                notificationService.Notify(new NotificationMessage()
                {
                    Severity = NotificationSeverity.Success,
                    Summary = c.l["SuccessfullyDeleted"],
                    Detail = "",
                    Duration = 3000
                });
                await refreshResult(searchKeyword.keyword, (currentPage - 1) * 10);
            }
            else
            {
                notificationService.Notify(new NotificationMessage()
                {
                    Severity = NotificationSeverity.Error,
                    Summary = response.error.message,
                    Detail = response.error.details,
                    Duration = 3000
                });
            }
        }
    }

    async Task CreateUserDialog() => await dialogService.OpenAsync(c.l["CreateNewRole"], ds =>
    @<CreateUserDialog ds="ds" OnCreated="async () => await refreshResult(searchKeyword.keyword,(currentPage-1)*10)" /> );


async Task EditUserDialog(int id) => await dialogService.OpenAsync(c.l["EditRole"], ds =>
@<EditUserDialog ds="ds" OnCreated="async () => await refreshResult(searchKeyword.keyword,(currentPage-1)*10)" userId="id" /> );


async Task ResetPasswordDialog(int id) => await dialogService.OpenAsync(c.l["CreateNewRole"], ds =>
@<ResetPasswordDialog ds="ds" userId="id" />     );




}
