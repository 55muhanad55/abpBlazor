@using Web.Blazor.Models.Tenants;
@using Web.Blazor.Models.Tenants.Results;

@inject ITenantService tenant
@inject NotificationService notificationService
<RadzenCard Style="position: inherit">

    <EditForm Model="createTenantModel" OnValidSubmit="CreateTenantAsync">
        <DataAnnotationsValidator />

        <div class="form-group row required">
            <label for="name" class="col-md-3 col-form-label"> @c.l["TenancyName"] </label>
            <div class="col-md-9">
                <InputText @bind-Value="createTenantModel.tenancyName" type="text" name="name" class="form-control ng-untouched ng-pristine ng-invalid" ng-reflect-required="" />
                <ValidationMessage For="() => createTenantModel.tenancyName" />

            </div>
        </div>
        <div class="form-group row required">
            <label for="displayName" class="col-md-3 col-form-label"> @c.l["Name"] </label><div class="col -md-9">
                <InputText @bind-Value="createTenantModel.name" type="text" name="displayName" class="form-control ng-untouched ng-pristine ng-invalid" />
                <ValidationMessage For="() => createTenantModel.name" />

            </div>
        </div>

        <div class="form-group row required">
            <label for="displayName" class="col-md-3 col-form-label"> @c.l["DatabaseConnectionString"] </label><div class="col -md-9">
                <InputText @bind-Value="createTenantModel.connectionString" type="text" name="displayName" class="form-control ng-untouched ng-pristine ng-invalid" />
                <ValidationMessage For="() => createTenantModel.connectionString" />

            </div>
        </div>
        <div class="form-group row required">
            <label for="displayName" class="col-md-3 col-form-label"> @c.l["AdminEmailAddress"] </label><div class="col -md-9">
                <InputText @bind-Value="createTenantModel.adminEmailAddress" type="text" name="displayName" class="form-control ng-untouched ng-pristine ng-invalid" />
                <ValidationMessage For="() => createTenantModel.adminEmailAddress" />

            </div>
        </div>
        <div class="col-md-9">
            <div class="custom-control custom-checkbox">
                <InputCheckbox type="checkbox" class="custom-control-input" id="ac"
                               @bind-Value="createTenantModel.isActive" @onclick="async () => await isActiveClick()" />
                <label class="custom-control-label" for="ac">
                    @c.l["IsActive"]
                </label>
            </div>
        </div>

        <br />
        <div class="modal-footer justify-content-between">
            <button type="button" class="btn btn-default" @onclick="()=> ds.Close()">
                @c.l["Cancel"]
            </button>

            <button type="submit" class="btn btn-primary">
                @c.l["Save"]
            </button>
        </div>
    </EditForm>
</RadzenCard>
@code {
    CreateTenantDto createTenantModel = new CreateTenantDto();

    [Parameter]
    public DialogService ds { get; set; }
    [Parameter]
    public EventCallback<bool> OnCreated { get; set; }

    protected override async Task OnInitializedAsync()
    {
        createTenantModel.isActive = true;
        await Task.FromResult(createTenantModel.isActive);

    }

    async Task isActiveClick()
    {
        createTenantModel.isActive = !createTenantModel.isActive;
        await Task.FromResult(createTenantModel.isActive);
    }

    async Task CreateTenantAsync()
    {
        var response = await tenant.Create(createTenantModel);
        if (response.success)
        {
            notificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Success,
                Summary = c.l["SavedSuccessfully"],
                Detail = "",
                Duration = 3000
            });
            await OnCreated.InvokeAsync(true);

        }
        else
        {
            notificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = response.error.message,
                Detail = response.error.details,
                Duration = 3000
            });
        }
        ds.Close();
    }
}
