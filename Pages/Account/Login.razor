@page "/Account/Login"
@layout AccountLayout
@inject NavigationManager NavigationManager
@inject IAuthService Authenticater
@inject NotificationService notificationService
@inject LocalStorage localStorge
@inject ISessionService sessionService
@inject AuthenticationStateProvider authenticationStateProvider
@inject IJSRuntime jsRuntime




@using Models.TokenAuth


<ChangeTenant />

<div>
    <h4 class="text-center mb-3">@c.l["LogIn"]</h4>
    <EditForm Model="@model" Context="LoginFormContext" OnValidSubmit="Auth">
        <DataAnnotationsValidator />
        <div class="form-group">
            <div class="input-group">
                <InputTextBox type="text"
                              class="form-control"
                              placeholder="@c.l["UserNameOrEmail"]"
                              maxlength="256"
                              @bind-Value="model.userNameOrEmailAddress" />
                <div class="input-group-append">
                    <div class="input-group-text">
                        <span class="fas fa-user"></span>
                    </div>
                </div>
            </div>
            <ValidationMessage For="() => model.userNameOrEmailAddress" />
        </div>
        <div class="form-group">
            <div class="input-group">
                <InputTextBox type="password"
                              class="form-control"
                              @bind-Value="model.password"
                              placeholder="@c.l["Password"]"
                              maxlength="32" />
                <div class="input-group-append">
                    <div class="input-group-text">
                        <span class="fas fa-lock"></span>
                    </div>
                </div>
            </div>
            <ValidationMessage For="() => model.password" />

        </div>
        <div class="form-group row">
            <div class="col-md-8">
                <div class="custom-control custom-checkbox" @onclick="@(() => model.rememberClient = !model.rememberClient)">
                    <InputCheckbox class="custom-control-input"
                                   @bind-Value="model.rememberClient" />
                    <label class="custom-control-label">
                        @c.l["RememberMe"]

                    </label>
                </div>
            </div>
            <div class="col-md-4">
                <button type="submit"
                        class="btn btn-primary btn-block"
                        disabled="@busy">
                    @c.l["LogIn"]
                </button>
            </div>
        </div>
    </EditForm>
    @if (sessionService.UserInfo.tenant != null)
    {
        <p class="mb-1">
            <a @onclick="goToRegister">
                <i class="fa fa-plus-circle"></i> @c.l["Register"]
            </a>
        </p>
    }

    <Footer />

</div>

@code {
    private AuthenticateRequest model = new AuthenticateRequest();

    bool busy = false;

    bool isSelfRegistrationAllowed = false;

    protected override async Task OnInitializedAsync()
    {

        isSelfRegistrationAllowed = sessionService.UserInfo.tenant != null;
        await Task.FromResult(isSelfRegistrationAllowed);

    }




    void goToRegister()
    {
        NavigationManager.NavigateTo("/Account/Register");
    }


    public async Task Auth()
    {
        busy = true;
        var response = await Authenticater.AuthenticateAsync(model);

        if (response.success)
        {
            await localStorge.SetItemAsync("Abp.AuthToken", response.result.accessToken);
            await jsRuntime.InvokeVoidAsync("goto", "/");
        }
        else
        {
            notificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Summary = response.error.message,
                Detail = response.error.details,
                Duration = 4000
            });

        }
        busy = false;
    }
}
